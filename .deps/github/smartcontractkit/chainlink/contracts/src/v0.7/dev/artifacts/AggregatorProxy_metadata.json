{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "aggregatorAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previous",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "latest",
						"type": "address"
					}
				],
				"name": "AggregatorConfirmed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "current",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "proposed",
						"type": "address"
					}
				],
				"name": "AggregatorProposed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "int256",
						"name": "current",
						"type": "int256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					}
				],
				"name": "AnswerUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "startedBy",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					}
				],
				"name": "NewRound",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "aggregator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "aggregatorAddress",
						"type": "address"
					}
				],
				"name": "confirmAggregator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "description",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "getAnswer",
				"outputs": [
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint80",
						"name": "roundId",
						"type": "uint80"
					}
				],
				"name": "getRoundData",
				"outputs": [
					{
						"internalType": "uint80",
						"name": "id",
						"type": "uint80"
					},
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint80",
						"name": "answeredInRound",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "getTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "latestAnswer",
				"outputs": [
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "latestRound",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "latestRoundData",
				"outputs": [
					{
						"internalType": "uint80",
						"name": "id",
						"type": "uint80"
					},
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint80",
						"name": "answeredInRound",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "latestTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "phaseId",
						"type": "uint16"
					}
				],
				"name": "phaseAggregators",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "phaseId",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "aggregatorAddress",
						"type": "address"
					}
				],
				"name": "proposeAggregator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposedAggregator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint80",
						"name": "roundId",
						"type": "uint80"
					}
				],
				"name": "proposedGetRoundData",
				"outputs": [
					{
						"internalType": "uint80",
						"name": "id",
						"type": "uint80"
					},
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint80",
						"name": "answeredInRound",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposedLatestRoundData",
				"outputs": [
					{
						"internalType": "uint80",
						"name": "id",
						"type": "uint80"
					},
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint80",
						"name": "answeredInRound",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"confirmAggregator(address)": {
					"details": "Reverts if the given address doesn't match what was previously proposed",
					"params": {
						"aggregatorAddress": "The new address for the aggregator contract"
					}
				},
				"getAnswer(uint256)": {
					"details": "#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
					"params": {
						"roundId": "the answer number to retrieve the answer for"
					}
				},
				"getRoundData(uint80)": {
					"details": "Note that answer and updatedAt may change between queries.",
					"params": {
						"roundId": "the requested round ID as presented through the proxy, this is made up of the aggregator's round ID with the phase ID encoded in the two highest order bytes"
					},
					"returns": {
						"answer": "is the answer for the given round",
						"answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
						"id": "is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.",
						"startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
						"updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
					}
				},
				"getTimestamp(uint256)": {
					"details": "#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
					"params": {
						"roundId": "the answer number to retrieve the updated timestamp for"
					}
				},
				"latestAnswer()": {
					"details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
				},
				"latestRound()": {
					"details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
				},
				"latestRoundData()": {
					"details": "Note that answer and updatedAt may change between queries.",
					"returns": {
						"answer": "is the answer for the given round",
						"answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
						"id": "is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.",
						"startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
						"updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
					}
				},
				"latestTimestamp()": {
					"details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
				},
				"phaseAggregators(uint16)": {
					"params": {
						"phaseId": "uint16"
					}
				},
				"proposeAggregator(address)": {
					"params": {
						"aggregatorAddress": "The new address for the aggregator contract"
					}
				},
				"proposedGetRoundData(uint80)": {
					"params": {
						"roundId": "the round ID to retrieve the round data for"
					},
					"returns": {
						"answer": "is the answer for the given round",
						"answeredInRound": "is the round ID of the round in which the answer was computed.",
						"id": "is the round ID for which data was retrieved",
						"startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
						"updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
					}
				},
				"proposedLatestRoundData()": {
					"returns": {
						"answer": "is the answer for the given round",
						"answeredInRound": "is the round ID of the round in which the answer was computed.",
						"id": "is the round ID for which data was retrieved",
						"startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
						"updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
					}
				}
			},
			"title": "A trusted proxy for updating where current answers are read from",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"aggregator()": {
					"notice": "returns the current phase's aggregator address."
				},
				"confirmAggregator(address)": {
					"notice": "Allows the owner to confirm and change the address to the proposed aggregator"
				},
				"decimals()": {
					"notice": "represents the number of decimals the aggregator responses represent."
				},
				"description()": {
					"notice": "returns the description of the aggregator the proxy points to."
				},
				"getAnswer(uint256)": {
					"notice": "get past rounds answers"
				},
				"getRoundData(uint80)": {
					"notice": "get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
				},
				"getTimestamp(uint256)": {
					"notice": "get block timestamp when an answer was last updated"
				},
				"latestAnswer()": {
					"notice": "Reads the current answer from aggregator delegated to."
				},
				"latestRound()": {
					"notice": "get the latest completed round where the answer was updated. This ID includes the proxy's phase, to make sure round IDs increase even when switching to a newly deployed aggregator."
				},
				"latestRoundData()": {
					"notice": "get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
				},
				"latestTimestamp()": {
					"notice": "Reads the last updated height from aggregator delegated to."
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"phaseAggregators(uint16)": {
					"notice": "return a phase aggregator using the phaseId"
				},
				"phaseId()": {
					"notice": "returns the current phase's ID."
				},
				"proposeAggregator(address)": {
					"notice": "Allows the owner to propose a new address for the aggregator"
				},
				"proposedAggregator()": {
					"notice": "returns the current proposed aggregator"
				},
				"proposedGetRoundData(uint80)": {
					"notice": "Used if an aggregator contract has been proposed."
				},
				"proposedLatestRoundData()": {
					"notice": "Used if an aggregator contract has been proposed."
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address, pending."
				},
				"version()": {
					"notice": "the version number representing the type of aggregator the proxy points to."
				}
			},
			"notice": "This contract provides a consistent address for the CurrentAnswerInterface but delegates where it reads from to the owner, who is trusted to update it.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/github/smartcontractkit/chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol": "AggregatorProxy"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 900
		},
		"remappings": []
	},
	"sources": {
		".deps/github/smartcontractkit/chainlink/contracts/src/v0.7/ConfirmedOwner.sol": {
			"keccak256": "0xba5a8452dcb14e3fecb9f39e415db6cd8b45cbe0a03899febe4f5e715396a9cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://321c4997e9d7248386b6946ce113ba586ab8f2bf57bb793c07abf0a5e9f80b76",
				"dweb:/ipfs/QmPMUYFm5iUQcEehh1woqH4jNWy2sEPU1fPSVUc76NJrRR"
			]
		},
		".deps/github/smartcontractkit/chainlink/contracts/src/v0.7/ConfirmedOwnerWithProposal.sol": {
			"keccak256": "0xd9c444260e0ed47bfcf49f269fa52af499e6707b741ae49c7d79e49168c9e4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://36aee63c481b52c4420d08135eef232102cf6d68435a3b00b21c87d1f1e2b050",
				"dweb:/ipfs/QmcAXNtqSJvVmsRdgbYfxqDtUZXp8UKK4kJg8C3cVf9FUo"
			]
		},
		".deps/github/smartcontractkit/chainlink/contracts/src/v0.7/dev/AggregatorProxy.sol": {
			"keccak256": "0x5c06d7cd6bb91216be94ac92ab8ace4d64bc8f64ecf42b30f46dc367c7061f1b",
			"license": "MIT",
			"urls": [
				"bzz-raw://2cb17201808cb8e3f8d049d626d2bde42e2951c0e976ba3db662f204e576d893",
				"dweb:/ipfs/QmP61SYauLY696BDKVb17RCaHQe1nb6NQtPJa3XqUQvpAD"
			]
		},
		".deps/github/smartcontractkit/chainlink/contracts/src/v0.7/interfaces/AggregatorInterface.sol": {
			"keccak256": "0x682963fa630d6afc8e1fcc5b3ee6b49ec1216f30ac698bca43747bd6e8a19fd6",
			"license": "MIT",
			"urls": [
				"bzz-raw://d79e1f45993bd99c580bed23f1128d3b5e85c66a1399604c09066f4b26cdd8d8",
				"dweb:/ipfs/QmY1uVYYPspoMHMHLB6RiWaBD2WJqorYf3HGpMB4FqL9Vo"
			]
		},
		".deps/github/smartcontractkit/chainlink/contracts/src/v0.7/interfaces/AggregatorProxyInterface.sol": {
			"keccak256": "0x835015c904e6b9b5c5ddf96f74b39a36c787dc7fa5ccd776ca0f02d0ce5cca90",
			"license": "MIT",
			"urls": [
				"bzz-raw://dab9393973a5527bda1d96caf47518a71986824c30673ccf50b32034a1737542",
				"dweb:/ipfs/QmQ1zS4VHNQEWZbYFBakPBfaVizLU1yoJvfV8DdPxb96iV"
			]
		},
		".deps/github/smartcontractkit/chainlink/contracts/src/v0.7/interfaces/AggregatorV2V3Interface.sol": {
			"keccak256": "0xc0c5994fc656e4393d2ca4e5128f658de92637346bbd943041c50d9ffbc8aa8d",
			"license": "MIT",
			"urls": [
				"bzz-raw://51b0829a4710485a63baac80f07cead98e82dd2da5ef94ef92940fde31e2c827",
				"dweb:/ipfs/QmPVQKfyq7GT8UjmztfNfsTfnkEJpxZZhLUWqaimkhgJoQ"
			]
		},
		".deps/github/smartcontractkit/chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol": {
			"keccak256": "0x5cf082133e64f5f90f446c011681ea7ab719e2992c7247074b943771c176494a",
			"license": "MIT",
			"urls": [
				"bzz-raw://0d7072938999863308ca3177b3ad71451e3639b16fbcfd3873bde1efd80386e1",
				"dweb:/ipfs/QmU3q5sCtSK7VM6tcvLfyUws1Z1WeYWeqCqBoecJwfAt5G"
			]
		},
		".deps/github/smartcontractkit/chainlink/contracts/src/v0.7/interfaces/OwnableInterface.sol": {
			"keccak256": "0x5b0ba0302a06c80ff88368c02dab44a0d9b735a599ba6ff905284044f02f2932",
			"license": "MIT",
			"urls": [
				"bzz-raw://0163141ba0751e2f2cfd064e7bc4df7b0d586dafd4df2bff86a10d12f0c85ea2",
				"dweb:/ipfs/QmUUxa983fJ6sRJEeBqnXsZ9XVu88KsL4fdhGTZQqVrwmb"
			]
		}
	},
	"version": 1
}